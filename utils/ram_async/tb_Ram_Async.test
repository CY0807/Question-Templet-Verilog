
// Despcription: This is a templet for doing verilog questions
// Author: Chris Chen
// Date: 2024-02-27
// Version: 1.0

`timescale 1ns / 1ps

module tb_Ram_Async();

parameter PERIOD = 20;
parameter WIDTH_WR = 16;
parameter DEPTH_WR = 64;
parameter WIDTH_RD = 8;
parameter DEPTH_RD = 128;


/************************* 1. signals *************************/

// clock and reset
reg clk, rst_n;

// input and output signals
reg                             wr_en   ;          
reg     [$clog2(DEPTH_WR)-1:0]  wr_addr ;
reg     [WIDTH_WR-1:0]          wr_data ;
reg     [$clog2(DEPTH_RD)-1:0]  rd_addr ;
wire    [WIDTH_RD-1:0]          rd_data ;

// simulation signals
reg is_finish;
integer i;


/************************ 2. simulation ***********************/

always #(PERIOD/2) clk = ~clk;

// work flow
initial begin
    $display("\n***** Simulation Begin *****\n");
    clk = 1;
    rst_n = 0;
    is_finish = 0;
    #100;
    rst_n = 1;
    
    wait(is_finish);
    #100;
    $display("\n***** Simulation Finish *****\n");
    $finish;
end

// init vars
initial begin 
    wr_en = 0;
    wr_addr = 0;
    wr_data = 0;
    rd_addr = 0;
end

// simulation logic
initial begin
    wait(rst_n);
    # PERIOD;
    
    wr_en = 1;
    for(i=0; i<60; i=i+1) begin
        # (PERIOD);
        wr_addr = wr_addr + 1;
        wr_data = wr_data + 1;   
    end

    wr_en = 0;
    for(i=0; i<120; i=i+1) begin
        # (PERIOD);
        rd_addr = rd_addr + 1;  
    end
       
    is_finish = 1;
end


/************************ 3. others ***************************/

initial begin  
    $dumpfile("tb_Ram_Async.vcd"); 
    $dumpvars(0, tb_Ram_Async);
end

Ram_Async
#( 
    .WIDTH_WR(WIDTH_WR),
    .DEPTH_WR(DEPTH_WR),
    .WIDTH_RD(WIDTH_RD),
    .DEPTH_RD(DEPTH_RD)
)
Ram_Async_inst
(
    .wr_clk    (clk      ),     
    .wr_en     (wr_en    ),
    .wr_addr   (wr_addr  ),
    .wr_data   (wr_data  ),
    .rd_clk    (clk      ),
    .rd_addr   (rd_addr  ),
    .rd_data   (rd_data  )
);

endmodule


